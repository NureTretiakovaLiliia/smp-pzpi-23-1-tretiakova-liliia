                    МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
   ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



                           Кафедра Програмної інженерії




                                        Звіт
                              з практичної роботи № 1
                    з дисципліни: «Скриптові мови програмування»
з теми: «Розробка інженерного рішення для друкування ялинки мовою Bash
               (Bourne again shell) з використанням циклів та галужень»




Виконала:                                                               Перевірив:
ст. гр. ПЗПІ-23-1                                                  ст. викл. каф. ПІ
Третьякова Л.С.                                                     Сокорчук І. П.




                                   Харків – 2025
                                                                                2
 1 РОЗРОБКА ІНЖЕНЕРНОГО РІШЕННЯ ДЛЯ ДРУКУВАННЯ ЯЛИНКИ
  МОВОЮ BASH (BOURNE AGAIN SHELL) З ВИКОРИСТАННЯМ ЦИКЛІВ
                                    ТА ГАЛУЖЕНЬ
      1.1 Мета роботи

      Здобути навички створення сценаріїв автоматизації засобами Bash (Bourne
again shell).

      1.2 Хід роботи

      Метою роботи є створення сценарію мовою Bash, що друкуватиме на екрані
ялинку із двох ярусів гілок, стовбура та шару снігу.

      1.2.1 Вимоги до сценарію

      Згідно до завдання до сценарію є наступні умови:

       а) ялинка повинна бути симетричною;
      б) яруси гілок повинні утворювати правильні рівнобедрені трикутники у
           яких сусідні рядки відрізняються на два символи та складаються
           почергово або з символів «*» або з символів «#»;
      в) ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина
           снігу;
       г) висота стовбура повинна бути 2 рядки, а ширина 3 стовбці;
       д) висота шару снігу повинна бути 1 рядок;
      е) висота ялинки у рядках разом з шаром снігу та ширина шару снігу в
           символах вказується сценарію в його параметрах при запуску;
      ж) параметри сценарію повинні мати додатнє значення;
       и) вказані значення повинні округлятися до потрібних у меншу сторону;
      к) якщо за вказаними при запуску сценарія значеннями зобразити ялинку на
           екрані неможливо, скрипт повинен вивести у потік помилок сповіщення
           про неправильне значення аргумента і повернути відповідний результат
           у батьківський процес;
      л)   у сценарії потрібно обов’язково використати функцію та такі
           конструкції;
                                                                                3
            1)   if ... then ... fi

            2)   while ... do ... done

            3)   until ... do ... done

            4)   for ... in .. do ... done

            5)   for ((...)); do ... done

      м)    файл   сценарію   повинен    бути   виконуваним    файлом   для   усіх
            користувачів системи;
      н) право редагувати файл сценарію повинен мати лише власник.

      1.2.2 Створимо сценарій дотримуючись вимог

     Перш за все, на початку кодового файлу було розміщено shebang, який
вказує на шлях до інтерпретатора. У моєму випадку це #!/bin/bash.
     Далі було реалізовано перевірку, яка гарантує правильне введення
вхідних параметрів:
      а) скрипт очікує рівно два аргументи;
      б) обидва аргументи мають бути додатними цілими числами;
      в) мінімальна висота (height) повинна бути не менше 8;
      г) мінімальна ширина (width) повинна бути не менше 7;
      д) висота повинна бути більшою або рівною ширині.
     Якщо хоча б одна умова не виконується, виводиться відповідне
повідомлення про помилку, і скрипт завершує роботу.
     Далі необхідно було скоригувати значення висоти й ширини. Якщо висота
не є парною, то її значення зменшується на 1 для збереження симетрії. Якщо
ширина є парною, то вона зменшується на 1, щоб ялинка мала центральну вісь
симетрії.
     Також було додано перевірку на те, чи після розміщення найширшого шару
ялинки з обох сторін лишиться рівномірний відступ. Це розраховується
наступним чином:
     half_height=$(( (height - 1) / 2 ))
     if [ $(( width - (2 * half_height - 1) )) -ne 2 ]; then
             echo "Cannot draw a tree" >&2
             exit 4
     fi
     Це забезпечує відповідність між висотою й шириною ялинки, що
                                                                            4
обов’язково має виконуватись, інакше скрипт завершує своє виконання.
      Було створено функцію center_text(), яка розраховує необхідну кількість
пробілів для центрованого виведення тексту в межах заданої ширини. Для
побудови верхньої частини ялинки визначається кількість символів у кожному
рядку від початку до кінця трикутної частини ялинки і кожен рядок відповідно
заповнюється символами «*» або «#» відповідно до непарності номеру рядка.
Також кожен рядок центрується пробілами відносно ширини. Останній символ
рядка зберігається у змінну last_pattern для того, щоб наступна частина ялинки
– трапеція – починалася з рядку символів, які не повторюються з попереднім.
Друга частина ялинки також малюється чергуючи символи зірочки і решітки між
рядками і центруючи їх.
     У кінці для малювання стовбура скрипт просто додає два відцентровані
рядки, що містять комбінацію з трьох решіток у центрі, які якраз і імітують
стовбур. Останній рядок – шар снігу – малюється шляхом додавання рядку із
зірочок довжиною в ширину.


     1.2 Висновки

     У результаті виконання лабораторної роботи мною було набуто навичок
створювати сценарії автоматизації засобами Bash (Bourne again shell).
                                                                   5
                            ДОДАТОК А
                  Повний текст розробленого сценарію

  1 #!/bin/bash
  2
  3 if [ "$#" -ne 2 ]; then echo "Expected 2 args" >&2; exit 1; fi
  4 if ! [[ "$1" =~ ^[0-9]+$ ]] || [ "$1" -lt 8 ]; then echo "Invalid
args: height must be at least 8" >&2; exit 2; fi
  5 if ! [[ "$2" =~ ^[0-9]+$ ]] || [ "$2" -lt 7 ]; then echo "Invalid
args: width must be at least 7" >&2; exit 3; fi
  6 if (( $1 < $2 )); then echo "Invalid args" >&2; exit 4; fi
  7
  8
  9 height=$1
 10 width=$2
 11
 12 if [ $(( height % 2 )) -ne 0 ]; then height=$(( height - 1 )); fi
 13 if [ $(( width % 2 )) -eq 0 ]; then width=$(( width - 1 )); fi
 14
 15 half_height=$(( (height - 1) / 2 ))
 16
 17 if [ $(( width - (2 * half_height - 1) )) -ne 2 ]; then echo
"Cannot draw a tree" >&2; exit 4; fi
 18
 19
 20 center_text() {
 21      local text="$1"
 22      local padding=$(( (width - ${#text}) / 2 ))
 23
 24      padding_str=""
 25
 26      for _ in $(seq 1 "$padding"); do
 27          padding_str+=" "
 28      done
 29
 30      echo "$padding_str$text"
 31 }
 32
 33
 34 last_pattern=""
 35 for h in $(seq 1 $half_height); do
 36      symbols=$(( 2 * h - 1 ))
 37      pattern=$([[ $((h % 2)) -eq 1 ]] && echo "*" || echo "#")
 38
 39      line=""
 40      for i in $(seq 1 $symbols); do
 41          line+="$pattern"
 42      done
 43
 44      center_text "$line"
 45
 46      last_pattern="$pattern"
 47 done
 48
 49 if [ "$last_pattern" = "*" ]; then
                                                     6
50      second_layer_pattern="#"
51 else
52      second_layer_pattern="*"
53 fi
54
55 i=2
56 until [ "$i" -gt "$half_height" ]; do
57      symbols=$(( 2 * i - 1 ))
58      line=""
59      for _ in $(seq 1 "$symbols"); do
60          line+="$second_layer_pattern"
61      done
62      center_text "$line"
63
64      if [ "$second_layer_pattern" = "*" ]; then
65          second_layer_pattern="#"
66      else
67          second_layer_pattern="*"
68      fi
69
70      ((i++))
71 done
72
73 j=0
74 while [ "$j" -lt 2 ]; do
75      center_text "###"
76      ((j++))
77 done
78
79 for char in '*'; do
80      line=""
81      for ((i=1; i<=width; i++)); do
82          line+="$char"
83      done
84      echo "$line"
85 done

