                    МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
   ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



                           Кафедра Програмної інженерії




                                        Звіт
                              з лабораторної роботи №1
                    з дисципліни: «Скриптові мови програмування»
з теми: «Розробка Bash-скрипту для перетворення CSV файлу розкладу Cist NURE
                             у Google Календар формат»




Виконала:                                                             Перевірив:
ст. гр. ПЗПІ-23-1                                  Старший викладач кафедри ПІ
Третьякова Л. С.                                                   Сокорчук І. П.




                                   Харків – 2025
                                                                                  2
    1 РОЗРОБКА BASH-СКРИПТУ ДЛЯ ПЕРЕТВОРЕННЯ CSV ФАЙЛУ
          РОЗКЛАДУ CIST NURE У GOOGLE КАЛЕНДАР ФОРМАТ

     1.1 Історія змін

№ Дата              Версія звіту    Опис змін та виправлень
1 20.04.2025        0.1             Створено звіт

     1.2 Мета роботи

     Ознайомитися з базовими командами Bash для обробки файлів і текстової
інформації, зокрема з командами select, ls, awk, sort, uniq, tee, cat, sed, iconv та
іншими. Навчитися їх практичному застосуванню. Розробити Bash-скрипт, який
конвертує розклад занять у форматі CSV у формат, сумісний для імпорту до Google
Календаря.

     1.3 Постановка задачі

     Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.
nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його
у формат CSV для завантаження в Google Календар https://support.google.com/.
Скрипт повинен підтримувати наступні ключі:
      –   «-help» — вивести довідку, завершити роботу та повернути успішний
          результат у батьківський процес;
      –   «-version» — ввивести інформацію про версію, завершити роботу та
          повернути успішний результат у батьківський процес;
      –   «-q» або «-quiet» — не виводити інформацію в стандартний потік
          виведення.
     Як параметри скрипт приймає назву академічної групи (шаблон) та
експортований CSV файл розкладу занять. Обидва аргументи є опціональними,
тобто, якщо вони не передані, то скрипт відображує меню вибору за допомогою
команди select, сформувавши відсортовани за датою список доступних CSV-файлів
у поточній директорії, що відповідають наступному шаблону:

     TimeTable_??_??_20??.csv
                                                                                 3
     Після вибору файлу скрипт відкриває його, генерує список академічних груп,
сортує їх в алфавітному порядку й виводить меню вибору групи за допомогою select.
     Правила обробки даних у файлі:
      –   Зчитати вхідний CSV-файл та відібрати лише ті рядки, які відповідають
          вибраній академічній групі.
      –   Пронумерувати кожне заняття: лекції та практичні рахуються як одне
          заняття, лабораторні як два.
      –   Поле Subject формувати на основі теми заняття, видаливши з неї назву
          академічної групи та дефіс на початку.
      –   Додати номер заняття у кінець теми після крапки з комою.
      –   Дату та час перетворити у формат Google Calendar — mm/dd/yyyy і
          HH:MM AM/PM, тобто у 12-годинному форматі з позначкою AM або PM.
      –   Поле Description заповнити текстом із колонки «Опис (Описание)» CSV-
          файлу.
      –   Зібрані дані сформувати у форматі, сумісному з імпортом у Google
          Calendar.
      –   Результат виводити у стандартний потік, якщо не використано прапорець
          -q або –quiet.
      –   Зберегти результат у новий файл із наступною назвою, додавши «Google»
          до основи.
     Обробка помилок:
      –   Якщо файл не знайдено або недоступний для читання, то вивести
          повідомлення про помилку в стандартний потік помилок і завершити
          скрипт з відповідним кодом.
      –   Якщо обрана група не знайдена — повідомити користувача та
          запропонувати інший вибір.
      –   Якщо група не вказана, але у файлі є лише одна — обробити її
          автоматично.
      –   У випадку помилок при обробці даних — вивести повідомлення і
          завершити роботу з помилковим кодом.
     Додаткові вимоги для скрипта: файл скрипту повинен мати права на
виконання для всіх користувачів, але дозволи на редагування лише для власника.
                                                                                 4
     1.4 Хід роботи

     На початку скрипта відбувається обробка параметрів командного рядка. Як
було зазначено раніше, «-help» виводить довідку і завершує роботу, «-version»
виводить номер версії і завершує роботу. Також імплементовано обробку тихого
режиму: якщо вказано «-q» або «-quiet», скрипт перенаправляє вивід у /dev/null,
тобто нічого не виводить у термінал.
     Далі функція select_option() виводить список варіантів груп або файлів
ідозволяє вибрати один за допомогою select. Якщо користувач вибере quit, то
виходить із функції з кодом 1.
     Далі скрипт шукає вхідні CSV-файли за шаблоном імені на кшталт

     TimeTable_??_??_20??.csv


     Якщо ж ім’я вхідного файлу не задане, то користувачу пропонується
вибрати один із знайдених. Файл перевіряється на існування і на права читання.
Далі за допомогою sed ’s/r/n/g’ видаляємо роздільники r, типові для Windows і
перетворюємо кодування файлу з Windows-1251 у UTF-8 за допомогою

     iconv -f cp1251 -t utf8


     Тепер парсимо перший стовпчик CSV із предметом і групою і витягуємо
саму назву групи. Для того, щоб розбити CSV, враховуючи лапки, використовуємо
наступний регулярний вираз:

     FPAT='[^,]*|"[^"]*"'


     Потім застосовуємо sort | uniq, що залишає унікальні назви груп. Переходимо
до обробки груп. Якщо група не задана як аргумент, скрипт або вибирає єдину
знайдену, або ж запитує користувача. Якщо ж заданої групи немає у файлі,
то скрипт просить обрати ще раз. Далі переходимо до awk скрипту. Виводимо
заголовок «Subject,Start Date,Start Time,End Date, End Time,Description» відповідно
до стандарту Google Calendar.
     Функція convert_time перевторює час HH:MM у 12-годинний формат AM/PM,
convert_date перетворює дату dd.mm.yyyy на mm/dd/yyyy.
                                                                                  5
     Фільтруємо лише ті групи, які починаються з назви обраної групи. Далі
підставляємо до назви кожного заняття його порядковий номер. Вивід передається у
файл. Якщо «-quiet», то скрипт нічого не показує, лише зберігає у файл. Одночасний
вивід реалізується за допомогою команди tee.
     Після виконання скрипту бачимо, що згенерувався файл, готовий до
імпортування до календаря. Імпортувавши його у календар (рис. Б.1), бачимо, що
все працює.

     1.5 Висновки

     У ході виконання лабораторної роботи я ознайомилася з базовими командами
Bash для обробки файлів і текстової інформації, зокрема з командами select, ls, awk,
sort, uniq, tee, cat, sed, iconv та іншими, навчилася їх практичному застосуванню,
а також розробила Bash-скрипт, який конвертує розклад занять у форматі CSV у
формат, сумісний для імпорту до Google Календаря.
                                                                               6
                                   ДОДАТОК А
                                   Відеозапис

     Відеозапис презентації результатів лабораторної роботи: https://www.youtube.
com/watch?v=RYU8ygtie0Q.
     Хронологічний опис відеозапису:
     00:00 –- Вступне представлення
     00:20 –- Початок опису коду
     06:12 –- Тестування скрипту
                                                                 7
                        ДОДАТОК Б
                     Графічні матеріали




Рисунок Б.1 – Результат роботи скрипту - імпортований календар
                                                                                         8
                                    ДОДАТОК В
                                   Програмний код

      В.1 { smp-pzpi-23-1-tretiakova-liliia-lab1-code }

      GitHub      репозиторій:    https://github.com/NureTretiakovaLiliia/smp-pzpi-23-
1-tretiakova-liliia/blob/main/Lab1/smp-pzpi-23-1-tretiakova-liliia-lab1/smp-pzpi-23-1-
tretiakova-liliia-lab1-code

        1 #!/bin/bash
        2
        3 if [[ "$1" == "--help" ]]; then
        4     echo "Використання: $0 [--help | --version] | [-q|--quiet]
      [group] <input_csv_file>"
        5     echo "Конвертація розкаладу із .csv NURE Cist у формат,
      готовий до імпорту в Google Calendar."
        6     echo " --help           Показати довідку"
        7     echo " --version        Інформація про версію"
        8     echo " -q, --quiet      Не виводити інфо у стандартний потік"
        9     echo " group            Назва групи (опціонально)"
       10     echo " input_csv_file .csv файл для конвертації"
       11     exit 0
       12 fi
       13
       14 if [ "$1" = "--version" ]; then
       15     echo 'NURE Cist to Google Calendar v1.0'
       16     exit 0
       17 fi
       18
       19 output="&1"
       20 if [ "$1" = "-q" -o "$1" = "--quiet" ]; then
       21     output=/dev/null
       22     shift
       23 fi
       24
       25 student_group=""
       26 if [ -z "$student_group" ]; then
       27     group_total=$(echo "$groups" | wc -l)
       28     if [ "$group_total" -eq 1 ]; then
       29          student_group=$(echo "$groups")
       30     else
       31          student_group=$(select_option "$groups") || exit 0
       32     fi
       33 fi
       34
       35
       36 ls_files=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)
       37
       38 select_option(){
       39
       40     select item in quit $1; do
       41          if [ "$item" = "" ]; then
       42              continue
                                                                    9
     43          elif [ "$item" = "quit" ]; then
     44               return 1
     45          else
     46               echo "$item"
     47               return 0
     48          fi
     49     done
     50 }
     51
     52 if [ -z "$input" ]; then
     53     input=$(select_option "$ls_files") || exit 0
     54 fi
     55
     56 if [ ! -f "$input" ]; then
     57     echo "Error: file '$input' doesnt exist." >&2
     58     exit 1
     59 fi
     60
     61 if [ ! -r "$input" ]; then
     62     echo "Error: permission to read file '$input' denied." >&2
     63     exit 2
     64 fi
     65
     66 file_content=$(cat "$input" | sed 's/\r/\n/g' | iconv -f cp1251 -
     t utf8)
     67
     68 groups=$(
     69     echo "$file_content" \
     70     | awk -v FPAT='[^,]*|"[^"]*"' '
     71      NR > 1 {
     72         gsub(/^"/, "", $1);
     73         if (split($1, parts, " - ") != 1) print parts[1]
     74      }
     75     ' | sort | uniq
     76 )
     77
     78 if [ -z "$student_group" ]; then
     79     group_total=$(echo "$groups" | wc -l)
     80     if [ "$group_total" -eq 1 ]; then
     81          student_group=$(echo "$groups")
     82     else
     83          student_group=$(select_option "$groups") || exit 0
     84     fi
     85 fi
     86
     87 if ! echo "$groups" | grep -q "$student_group"; then
     88     echo "There is no such group as '$student_group' in
     '$input'."
     89     student_group=$(select_option "$groups") || exit 0
     90 fi
     91
     92 out_file="Google_$(basename "$input")"
     93
     94 awk_script=$(cat <<'EOF'
     95 BEGIN {
     96     print "Subject,Start Date,Start Time,End Date,End
     Time,Description"
     97 }
                                                                         10
     98
     99 function convert_time(t) {
     100      gsub(/"/, "", t)
     101      split(t, parts, ":")
     102      h = parts[1] + 0
     103      m = parts[2] + 0
     104      ampm = "AM"
     105      if (h == 0) h = 12
     106      else if (h == 12) ampm = "PM"
     107      else if (h > 12) { h -= 12; ampm = "PM" }
     108      return sprintf("%02d:%02d %s", h, m, ampm)
     109 }
     110
     111 function convert_date(d) {
     112      gsub(/"/, "", d)
     113      split(d, parts, ".")
     114      dd = parts[1]
     115      mm = parts[2]
     116      yy = parts[3]
     117      return sprintf("%02d/%02d/%04d", mm, dd, yy)
     118 }
     119
     120 NR > 1 && $1 ~ group_pattern {
     121      subj = $1
     122      gsub(group_pattern "|^\"|\"$", "", subj)
     123
     124      dt_st = convert_date($2)
     125      t_st = convert_time($3)
     126      dt_e = convert_date($4)
     127      t_e = convert_time($5)
     128      count[$2]++
     129
     130      print "\"" subj "; №" count[$2] "\"," dt_st "," t_st "," dt_e
     "," t_e "," $12
     131 }
     132 EOF
     133 )
     134
     135 if [ "$output" = "/dev/null" ]; then
     136      echo "$file_content" \
     137      | awk -v FPAT='[^,]*|"[^"]*"' -v
     group_pattern="^\"$student_group - " "$awk_script" \
     138      | tee "$out_file" > /dev/null
     139 else
     140      echo "$file_content" \
     141      | awk -v FPAT='[^,]*|"[^"]*"' -v
     group_pattern="^\"$student_group - " "$awk_script" \
     142      | tee "$out_file"
     143 fi
     
